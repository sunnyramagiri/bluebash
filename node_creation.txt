Master-Slave

    - Master and Slave it is an architecture it will allow you to distribute workload of master machine to slave machine
    - Instead of running Multiple jobs at master machine create a slave machine and distribute the work to slave machine 
    - Download slave.jar file from jenkins machine (which is Master Machine)
    - Slave.jar file will containe required setup for slave machine 

1.launch 2 machines with ubuntu specify jenkins-server and slave-server

    step:1 master-jenkins 
        1.connect to jenkins install java,git and maven and jenkins and update repo
        2.setup jenkins web page
    
    step:2 slave machine
        1.connect to slave machine
        2.install java package  
        2.modify sshd_config file Publicauthentication  no
        						yes
        3.$sudo service sshd restart
        4.set password to ubuntu user $sudo passwd ubuntu
        5.exit

    step:3--enable ssh password less connection master to slave 
        1.connect to master server
        2.switch to jenkins user generate ssh-keygen
        3.ssh-copy-id ubuntu@slave_private_ip
        4.yes
        5.again ssh ubuntu@slave_private_ip ---- now login into slave machine 

    step:4 -- slave machine
        1.download slave.jar file from master machine 
          $wget http://jenkins_public_ip:8080/jnlpJars/slave.jar
          chmod 777 slave.jar
          pwd 
          /home/ubuntu/slave.jar
        2.create a directory for "directory path" mkdir dir1
          chmod 777 dir1
          cd dir1 
          pwd 
          /home/ubuntu/dir1
        3.exit
    step:5 -- jenkins web page 
        1.open jenkins web page 
        2.go to manage jenkins--manage nodes and clouds
            built in node--master machine
        3.create a new node--click on new node "slave1"
        4.select permanent agent
        5.create
        6.description -- 
        7.number of excutors -- it means how many jobs can run parallel
        8.remote root directory --- /home/ubuntu/dir1
        9.labels -- myslave--another name for slave 
        10.usage -- only build jobs with label expressions matching this
        11.launch method -- launch agent via excution of command on the controller (for this download plugin which is launch agent commands)
        12.launch command
            ssh ubuntu@slave_private_ip java -jar /home/ubuntu/slave.jar
        13.save
        master - slave setup complete 
    
    step6: 
        1.create development job 
        2.create testing job  
        3.link them and run development job
        4.after go into testin--configure--general--restrict where to run -- give label name "myslave"--apply and save 
        4.now development job run on master machine testing job run on slave machine



===============================================

Master and Slave with Example of Pipeline implementation using Password Authentication

    Master and Slave Machine setup with pipeline 

        1. Launch Two Ec2 machines name them Master and slave machine
        2. connect to master install java, maven, git, and Jenkins
        3. connect to slave machine install java only  

    Agent machine(Slave Machine)

        step1: modify PasswordAuthentication No to Yes (in /etc/ssh/sshd_config file)
        step2: create a Jenkins user with # adduser jenkins (it will automatically take user creation and password )
        step3: set permission for sudo privilages in slave machine for jenkins user command is  # usermod -aG sudo jenkins (Now jenkins user also run root users commands) 
        step4: restart ssh service # service ssh restart 


    On master machine

        step1: connect to master machine and swith to jenkins user # sudo su - jenkins and generate keys # ssh-keygen (it will generate private key and public key)
        step2: send public key to jenkins user in slave machine # ssh-copy-id jenkins@slave-private-ip  
        step3: connect to jenkins user in slave machine 


        - Upto here passwordless authentication has been established from master machine jenkins user to slave machine jenkins user 





    Jenkins webpage :

        step1: Add slave machine in the jenkins webpage (adding node)

        step2: Adding Node 
            Goto jenkins manage-->Nodes-->name(slave1)-->select permanent agent-->Number of excuters(2)-->RemoterootDirectory(/home/jenkins)-->labels(jenkins-agent01)-->usage(use this node as much as possible)-->Launch method(Launch agent via ssh)-->Host(172.31.27.204(slave-private-ip))-->credentials{select username and password(username[jenkins]password[****]jenkinsID[jenkins-key]description[jenkins-key])}-->Hostkey verification strategy(known host file verification strategy)-->Availability(keep this agent online as much as possible)-->click on save  

        Now automatically  slave machine comes into online 

    ==============================================
    To run builds on slave machine 
    -------------------------------------------
    pipeline {
        agent {
            label 'jenkins-agent01'
        }
        stages {
            stage('download code') {
                steps {
                 git 'https://github.com/thej950/maven.git'
                }
            }
        }
    }
    ====================================================
    -->from above labels sections specifying agent01 now that git using  workspace will be dowload on slave mahine jenkins workspace will be available 

